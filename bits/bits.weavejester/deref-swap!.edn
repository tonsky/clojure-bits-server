{:bit/namespace "bits.weavejester", :bit/name "deref-swap!", :bit/docstring "Atomically swaps the value of the atom to be `(apply f x args)`, where x is the current value of the atom, then returns the original value of the atom. This function therefore acts like an atomic `deref` then `swap!`.", :bit/body-clj "(fn deref-swap!\r\n  ([atom f]\r\n    (loop []\r\n      (let [value (deref atom)]\r\n        (if (compare-and-set! atom value (f value))\r\n          value\r\n          (recur)))))\r\n  ([atom f & args]\r\n    (deref-swap! atom (fn [%] apply f % args)))))", :bit/body-cljs "(fn deref-swap!\r\n  ([atom f]\r\n    (let [value (deref atom)]\r\n      (reset! atom (f value))\r\n      value))\r\n  ([atom f & args]\r\n    (deref-swap! atom (fn [%] (apply f % args)))))", :bit.author/name "James Reeves"}